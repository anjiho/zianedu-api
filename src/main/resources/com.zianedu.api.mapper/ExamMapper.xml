<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zianedu.api.mapper.ExamMapper">

    <select id="selectGiChulProblemList" resultType="TExamUserVO">
        SELECT
            A.EXAM_KEY, A.NAME, A.PRINT_QUESTION_FILE, A.PRINT_COMMENTARY_FILE,
           (SELECT COUNT(EXAM_USER_KEY) FROM T_EXAM_USER WHERE J_G_KEY = 0 AND USER_KEY = #{userKey} AND EXAM_KEY = A.EXAM_KEY) AS isComplete,
           (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_CTG_KEY) as classCtgName,
           (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.SUBJECT_CTG_KEY) as subjectCtgName,
           (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_GROUP_CTG_KEY) as groupCtgName
        FROM T_EXAM_MASTER A
        WHERE 1=1
        AND IS_GICHUL = 1
        <!-- 급수 검색 -->
        <if test="groupCtgKey > 0">
            AND A.CLASS_GROUP_CTG_KEY = #{groupCtgKey}
        </if>
        <!-- 직렬 검색 -->
        <if test="classCtgKey > 0">
            AND A.CLASS_CTG_KEY = #{classCtgKey}
        </if>
        <!-- 과목 검색 -->
        <if test="subjectCtgKey > 0">
            AND A.SUBJECT_CTG_KEY = #{subjectCtgKey}
        </if>
        ORDER BY EXAM_KEY ASC
    </select>

    <select id="selectGiChulProblemListByComplete" resultType="TExamUserVO">
        SELECT T.*
        FROM (
            SELECT
                A.EXAM_KEY, A.NAME, A.PRINT_QUESTION_FILE, A.PRINT_COMMENTARY_FILE,
                (SELECT COUNT(EXAM_USER_KEY) FROM T_EXAM_USER WHERE J_G_KEY = 0 AND USER_KEY = #{userKey} AND EXAM_KEY = A.EXAM_KEY) AS isComplete,
                (SELECT EXAM_USER_KEY FROM T_EXAM_USER WHERE USER_KEY = #{userKey} and isComplate = 1 AND EXAM_KEY = A.EXAM_KEY) AS examUserKey,
                (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_CTG_KEY) as classCtgName,
                (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.SUBJECT_CTG_KEY) as subjectCtgName,
                (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_GROUP_CTG_KEY) as groupCtgName
            FROM T_EXAM_MASTER A
            WHERE 1=1
            AND IS_GICHUL = 1
            <!-- 급수 검색 -->
            <if test="groupCtgKey > 0">
                AND A.CLASS_GROUP_CTG_KEY = #{groupCtgKey}
            </if>
            <!-- 직렬 검색 -->
            <if test="classCtgKey > 0">
                AND A.CLASS_CTG_KEY = #{classCtgKey}
            </if>
            <!-- 과목 검색 -->
            <if test="subjectCtgKey > 0">
                AND A.SUBJECT_CTG_KEY = #{subjectCtgKey}
            </if>
            ORDER BY EXAM_KEY ASC
        ) T
        WHERE T.isComplete = 1
    </select>

    <select id="selectDiagnosisEvaluationExamList" resultType="TExamUserVO">
        SELECT
            A.EXAM_KEY, A.NAME, A.PRINT_QUESTION_FILE, A.PRINT_COMMENTARY_FILE,
            TO_CHAR(A.ACCEPT_START_DATE, 'YYYY-MM-DD hh24:mi:ss') as acceptStartDate,
            TO_CHAR(A.ACCEPT_END_DATE, 'YYYY-MM-DD hh24:mi:ss') as acceptEndDate,
            (SELECT COUNT(EXAM_USER_KEY) FROM T_EXAM_USER WHERE J_G_KEY = 0 AND USER_KEY = #{userKey} AND EXAM_KEY = A.EXAM_KEY) AS isComplete,
            (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_CTG_KEY) as classCtgName,
            (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.SUBJECT_CTG_KEY) as subjectCtgName,
            (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_GROUP_CTG_KEY) as groupCtgName
        FROM T_EXAM_MASTER A
        WHERE A.EXAM_KEY = 212
    </select>

    <select id="selectDiagnosisEvaluationCompleteList" resultType="TExamUserVO">
        SELECT T.*
        FROM (
            SELECT
                A.EXAM_KEY, A.NAME, A.PRINT_QUESTION_FILE, A.PRINT_COMMENTARY_FILE,
                TO_CHAR(A.ACCEPT_START_DATE, 'YYYY-MM-DD hh24:mi:ss') as acceptStartDate,
                TO_CHAR(A.ACCEPT_END_DATE, 'YYYY-MM-DD hh24:mi:ss') as acceptEndDate,
                (SELECT COUNT(EXAM_USER_KEY) FROM T_EXAM_USER WHERE J_G_KEY = 0 AND USER_KEY = #{userKey} AND EXAM_KEY = A.EXAM_KEY) AS isComplete,
                (SELECT EXAM_USER_KEY FROM T_EXAM_USER WHERE USER_KEY =  #{userKey} and isComplate = 1 AND EXAM_KEY = A.EXAM_KEY) AS examUserKey,
                (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_CTG_KEY) as classCtgName,
                (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.SUBJECT_CTG_KEY) as subjectCtgName,
                (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_GROUP_CTG_KEY) as groupCtgName
            FROM T_EXAM_MASTER A
            WHERE A.EXAM_KEY = 212
       ) T
       WHERE T.isComplete = 1
    </select>

    <select id="selectWeekBigExamList" resultType="TExamUserVO">
        SELECT
            A.EXAM_KEY, A.NAME, A.PRINT_QUESTION_FILE, A.PRINT_COMMENTARY_FILE,
            TO_CHAR(A.ACCEPT_START_DATE, 'YYYY-MM-DD hh24:mi:ss') as acceptStartDate,
            TO_CHAR(A.ACCEPT_END_DATE, 'YYYY-MM-DD hh24:mi:ss') as acceptEndDate,
           (SELECT COUNT(EXAM_USER_KEY) FROM T_EXAM_USER WHERE J_G_KEY = 0 AND USER_KEY = #{userKey} AND EXAM_KEY = A.EXAM_KEY) AS isComplete,
           (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_CTG_KEY) as classCtgName,
           (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.SUBJECT_CTG_KEY) as subjectCtgName,
           (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_GROUP_CTG_KEY) as groupCtgName
        FROM T_EXAM_MASTER A
        WHERE 1=1
        AND A.IS_REAL_FREE = 1
        AND A.IS_GICHUL = 0
        AND A.EXAM_KEY != 212
        ORDER BY EXAM_KEY ASC
    </select>

    <select id="selectWeekBigExamAchievementManagementList" resultType="TExamUserVO">
        SELECT T.*
        FROM (
            SELECT
                A.EXAM_KEY, A.NAME, A.PRINT_QUESTION_FILE, A.PRINT_COMMENTARY_FILE,
                TO_CHAR(A.ACCEPT_START_DATE, 'YYYY-MM-DD hh24:mi:ss') as acceptStartDate,
                TO_CHAR(A.ACCEPT_END_DATE, 'YYYY-MM-DD hh24:mi:ss') as acceptEndDate,
               (SELECT COUNT(EXAM_USER_KEY) FROM T_EXAM_USER WHERE J_G_KEY = 0 AND USER_KEY = #{userKey} AND EXAM_KEY = A.EXAM_KEY) AS isComplete,
               (SELECT EXAM_USER_KEY FROM T_EXAM_USER WHERE USER_KEY =  #{userKey} and isComplate = 1 AND EXAM_KEY = A.EXAM_KEY) AS examUserKey,
               (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_CTG_KEY) as classCtgName,
               (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.SUBJECT_CTG_KEY) as subjectCtgName,
               (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = A.CLASS_GROUP_CTG_KEY) as groupCtgName
            FROM T_EXAM_MASTER A
            WHERE 1=1
            AND A.IS_REAL_FREE = 1
            AND A.IS_GICHUL = 0
            AND A.EXAM_KEY != 212
            ORDER BY EXAM_KEY ASC
         ) T
       WHERE T.isComplete = 1
       AND T.examUserKey IS NOT NULL
    </select>
    <!-- 모의고사 성적보기 상세 화면 상단 정보 (응시번호, 이름 )-->
    <select id="selectExamResultHeaderInfo" resultType="TExamUserVO">
        SELECT
            A.*,
            (SELECT NAME FROM T_USER WHERE USER_KEY = A.USER_KEY) as userName
        FROM T_EXAM_USER A
        WHERE A.EXAM_USER_KEY = #{examUserKey}
    </select>
    <!-- 모의고사 성적보기 상세 화면 상단 응시과목 정보 -->
    <select id="selectExamSubjectNameList" resultType="String">
        SELECT C.NAME
        FROM T_EXAM_SUBJECT_USER A
        LEFT JOIN T_EXAM_QUESTION_BANK_SUBJECT B
        ON A.EXAM_QUES_BANK_SUBJECT_KEY = B.EXAM_QUESTION_BANK_SUBJECT_KEY
        INNER JOIN T_CATEGORY C
        ON B.SUBJECT_CTG_KEY = C.CTG_KEY
        WHERE A.EXAM_USER_KEY = #{examUserKey}
    </select>

    <select id="selectExamSubjectStaticsList" resultType="ExamSubjectStaticsVO">
        SELECT C.NAME as subjectName,
        (
                SELECT count(BANK_SUBJECT_QUES_LINK_KEY)
                FROM T_BANK_SUBJECT_QUES_LINK
                WHERE EXAM_QUES_BANK_SUBJECT_KEY = B.EXAM_QUESTION_BANK_SUBJECT_KEY
        ) as questionCnt,

        (
                SELECT COUNT(TT.EXAM_QUESTION_USER_KEY)
                FROM T_BANK_SUBJECT_QUES_LINK T
                LEFT JOIN T_EXAM_QUESTION_USER TT
                ON T.EXAM_QUES_BANK_KEY = TT.EXAM_QUESTION_BANK_KEY
                WHERE T.EXAM_QUES_BANK_SUBJECT_KEY = A.EXAM_QUES_BANK_SUBJECT_KEY
                AND TT.USER_KEY = A.USER_KEY
                AND TT.SCORE = 1

        ) as answerCnt,
        (
                SELECT COUNT(EXAM_USER_KEY) as cnt FROM T_EXAM_USER WHERE EXAM_KEY = A.EXAM_KEY
                AND ISSTART = 1
                AND T_EXAM_USER.ISCOMPLATE = 1
        ) as totalAnswerCnt,
        A.*, B.*
        FROM T_EXAM_SUBJECT_USER A
        LEFT JOIN T_EXAM_QUESTION_BANK_SUBJECT B
        ON A.EXAM_QUES_BANK_SUBJECT_KEY = B.EXAM_QUESTION_BANK_SUBJECT_KEY
        INNER JOIN T_CATEGORY C
        ON B.SUBJECT_CTG_KEY = C.CTG_KEY
        WHERE A.EXAM_USER_KEY = #{examUserKey}
    </select>

    <select id="selectExamSubjectGrade" resultType="Integer">
        SELECT ZZ.NUM FROM (
            SELECT  ROW_NUMBER() OVER(ORDER BY Z.cnt desc) NUM, Z.* FROM (
                SELECT COUNT(*) as cnt, TT.USER_KEY
                FROM T_BANK_SUBJECT_QUES_LINK T
                LEFT JOIN T_EXAM_QUESTION_USER TT
                ON T.EXAM_QUES_BANK_KEY = TT.EXAM_QUESTION_BANK_KEY
                WHERE T.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                AND TT.SCORE = 1
                AND TT.USER_KEY IN ( SELECT USER_KEY FROM T_EXAM_USER WHERE EXAM_KEY = #{examKey} AND ISSTART = 1 AND T_EXAM_USER.ISCOMPLATE = 1 )
                GROUP BY TT.USER_KEY
            )Z
            ORDER BY Z.cnt desc
        )ZZ
        WHERE ZZ.USER_KEY = #{userKey}
    </select>

    <select id="selectSubjectStaticsSum" resultType="Integer">
        SELECT SUM(T.subjectSum) as subjectStaticsSum
        FROM (
                SELECT (COUNT(*) * 5) as subjectSum
                FROM T_EXAM_USER A
                LEFT JOIN T_EXAM_QUESTION_USER B
                ON A.EXAM_USER_KEY = B.EXAM_USER_KEY
                LEFT JOIN T_BANK_SUBJECT_QUES_LINK C
                ON B.EXAM_QUESTION_BANK_KEY = C.EXAM_QUES_BANK_KEY
                WHERE A.EXAM_KEY = #{examKey}
                AND C.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                AND A.ISSTART = 1
                AND A.ISCOMPLATE = 1
                AND B.SCORE = 1
                GROUP BY A.USER_KEY
            )T
    </select>

    <select id="selectSubjectTopPercentScore" resultType="Integer">
        SELECT
                (
                    SELECT ( (SUM(score)) / COUNT(*)) as cnt
                    FROM (
                        SELECT T.*, (T.cnt * 5) as score,
                        PERCENT_RANK() OVER (ORDER BY T.cnt DESC) as per_rank
                        FROM (
                            SELECT COUNT(*) cnt, A.USER_KEY
                            FROM T_EXAM_USER A
                            LEFT JOIN T_EXAM_QUESTION_USER B
                            ON A.EXAM_USER_KEY = B.EXAM_USER_KEY
                            LEFT JOIN T_BANK_SUBJECT_QUES_LINK C
                            ON B.EXAM_QUESTION_BANK_KEY = C.EXAM_QUES_BANK_KEY
                            WHERE A.EXAM_KEY = #{examKey}
                            AND C.EXAM_QUES_BANK_SUBJECT_KEY = A.EXAM_QUES_BANK_SUBJECT_KEY
                            AND A.ISSTART = 1
                            AND A.ISCOMPLATE = 1
                            AND B.SCORE = 1
                            AND A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                            GROUP BY A.USER_KEY
                        )T
                        ORDER BY T.cnt DESC
                    )TT
                    <if test="percentType == 10">
                        <![CDATA[
                        WHERE TT.per_rank <= 0.1
                        ]]>
                    </if>
                    <if test="percentType == 30">
                        <![CDATA[
                        WHERE TT.per_rank <= 0.3
                        ]]>
                    </if>
                ) as topTenPercent
        FROM T_EXAM_SUBJECT_USER A
        LEFT JOIN T_EXAM_QUESTION_BANK_SUBJECT B
        ON A.EXAM_QUES_BANK_SUBJECT_KEY = B.EXAM_QUESTION_BANK_SUBJECT_KEY
        INNER JOIN T_CATEGORY C
        ON B.SUBJECT_CTG_KEY = C.CTG_KEY
        WHERE A.EXAM_USER_KEY = #{examUserKey}
        AND A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
    </select>

    <!-- 유형별 정답률 -->
    <select id="selectScoreRateByStepCtgKey" resultType="ScoreRateGraphVO">
        SELECT Z.ctgName, Z.problemCnt, NVL(ZZ.scoreCnt, 0) as scoreCnt
        FROM
        (
            SELECT  T.*, (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = T.STEP_CTG_KEY) as ctgName
            FROM (
                    SELECT COUNT(B.STEP_CTG_KEY) as problemCnt , B.STEP_CTG_KEY
                    FROM T_BANK_SUBJECT_QUES_LINK A
                    LEFT JOIN T_EXAM_QUESTION_BANK B
                    ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                    WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                    GROUP BY B.STEP_CTG_KEY
                )T
            ORDER BY T.STEP_CTG_KEY ASC
        ) Z
        LEFT OUTER JOIN
        (
            SELECT T.*
            FROM (
                    SELECT COUNT(B.STEP_CTG_KEY) as scoreCnt ,B.STEP_CTG_KEY
                    FROM T_BANK_SUBJECT_QUES_LINK A
                    LEFT JOIN T_EXAM_QUESTION_BANK B
                    ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                    LEFT JOIN T_EXAM_QUESTION_USER C
                    ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
                    WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                    AND C.USER_KEY = #{userKey}
                    AND C.SCORE = 1
                    GROUP BY B.STEP_CTG_KEY
                )T

        ) ZZ
        ON Z.STEP_CTG_KEY = ZZ.STEP_CTG_KEY
        ORDER BY Z.STEP_CTG_KEY ASC
    </select>

    <!-- 패턴별 정답률 -->
    <select id="selectScoreRateByPatternCtgKey" resultType="ScoreRateGraphVO">
        SELECT Z.ctgName, Z.problemCnt, NVL(ZZ.scoreCnt, 0) as scoreCnt
        FROM
        (
            SELECT  T.*, (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = T.PATTERN_CTG_KEY) as ctgName
            FROM (
                    SELECT COUNT(B.PATTERN_CTG_KEY) as problemCnt , B.PATTERN_CTG_KEY
                    FROM T_BANK_SUBJECT_QUES_LINK A
                    LEFT JOIN T_EXAM_QUESTION_BANK B
                    ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                    WHERE A.EXAM_QUES_BANK_SUBJECT_KEY =  #{examQuesBankSubjectKey}
                    GROUP BY B.PATTERN_CTG_KEY
                )T
            ORDER BY T.PATTERN_CTG_KEY ASC
        ) Z
        LEFT OUTER JOIN
        (
            SELECT T.*
            FROM (
                    SELECT COUNT(B.PATTERN_CTG_KEY) as scoreCnt ,B.PATTERN_CTG_KEY
                    FROM T_BANK_SUBJECT_QUES_LINK A
                    LEFT JOIN T_EXAM_QUESTION_BANK B
                    ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                    LEFT JOIN T_EXAM_QUESTION_USER C
                    ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
                    WHERE A.EXAM_QUES_BANK_SUBJECT_KEY =  #{examQuesBankSubjectKey}
                    AND C.USER_KEY = #{userKey}
                    AND C.SCORE = 1
                    GROUP BY B.PATTERN_CTG_KEY
                )T

        ) ZZ
        ON Z.PATTERN_CTG_KEY = ZZ.PATTERN_CTG_KEY
        ORDER BY Z.PATTERN_CTG_KEY ASC
    </select>

    <!-- 대단원별 정답률 -->
    <select id="selectScoreRateByUnitCtgKey" resultType="ScoreRateGraphVO">
        SELECT Z.ctgName, Z.problemCnt, NVL(ZZ.scoreCnt, 0) as scoreCnt
        FROM
        (
            SELECT  T.*, (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = T.UNIT_CTG_KEY) as ctgName
            FROM (
                    SELECT COUNT(B.UNIT_CTG_KEY) as problemCnt , B.UNIT_CTG_KEY
                    FROM T_BANK_SUBJECT_QUES_LINK A
                    LEFT JOIN T_EXAM_QUESTION_BANK B
                    ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                    WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                    GROUP BY B.UNIT_CTG_KEY
                )T
            ORDER BY T.UNIT_CTG_KEY ASC
        ) Z
        LEFT OUTER JOIN
        (
            SELECT T.*
            FROM (
                    SELECT COUNT(B.UNIT_CTG_KEY) as scoreCnt, B.UNIT_CTG_KEY
                    FROM T_BANK_SUBJECT_QUES_LINK A
                    LEFT JOIN T_EXAM_QUESTION_BANK B
                    ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                    LEFT JOIN T_EXAM_QUESTION_USER C
                    ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
                    WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                    AND C.USER_KEY = #{userKey}
                    AND C.SCORE = 1
                    GROUP BY B.UNIT_CTG_KEY
                )T

        ) ZZ
        ON Z.UNIT_CTG_KEY = ZZ.UNIT_CTG_KEY
        ORDER BY Z.UNIT_CTG_KEY ASC
    </select>

    <select id="selectExamStaticsDetailInfoBySubject" resultType="ExamStaticsDetailSubjectVO">
    SELECT  ROW_NUMBER() OVER(ORDER BY Z.POS ASC) NUM,  Z.*
    FROM(
            SELECT
                T.EXAM_QUES_BANK_KEY,
                T.BANK_SUBJECT_QUES_LINK_KEY,
                TT.POS,
                T.answer, TT.USER_ANSWER, T.EXAM_LEVEL,

               CASE TT.USER_ANSWER
                   WHEN 1 THEN T.ANSWER_1_REASON
                   WHEN 2 THEN T.ANSWER_2_REASON
                   WHEN 3 THEN T.ANSWER_3_REASON
                   WHEN 4 THEN T.ANSWER_4_REASON
                   ELSE T.ANSWER_1_REASON
                   END as answer_comment,

               CASE TT.EXAM_LEVEL
                   WHEN 0 THEN '상'
                   WHEN 1 THEN '중'
                   WHEN 2 THEN '하'
                   ELSE ''
                   END as examLevelName,

               (SELECT NAME FROM T_CATEGORY WHERE CTG_KEY = TT.STEP_CTG_KEY) as stepName,
               TT.UNIT_CTG_KEY,
               (
                   SELECT COUNT(A.BANK_SUBJECT_QUES_LINK_KEY)
                   FROM T_BANK_SUBJECT_QUES_LINK A
                   LEFT JOIN T_EXAM_QUESTION_BANK B
                   ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                   LEFT JOIN T_EXAM_QUESTION_USER C
                   ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
                   WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                   AND A.EXAM_QUES_BANK_KEY = T.EXAM_QUES_BANK_KEY
               ) as totalCnt,
               (
                   SELECT COUNT(A.BANK_SUBJECT_QUES_LINK_KEY)
                   FROM T_BANK_SUBJECT_QUES_LINK A
                   LEFT JOIN T_EXAM_QUESTION_BANK B
                   ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                   LEFT JOIN T_EXAM_QUESTION_USER C
                   ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
                   WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                   AND A.EXAM_QUES_BANK_KEY = T.EXAM_QUES_BANK_KEY
                   AND C.SCORE = 1
               ) as totalScoreCnt,
               (
                   SELECT COUNT(A.BANK_SUBJECT_QUES_LINK_KEY)
                   FROM T_BANK_SUBJECT_QUES_LINK A
                   LEFT JOIN T_EXAM_QUESTION_BANK B
                   ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                   LEFT JOIN T_EXAM_QUESTION_USER C
                   ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
                   WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                   AND A.EXAM_QUES_BANK_KEY = T.EXAM_QUES_BANK_KEY
                   AND C.SCORE = 0
               ) as totalWrongCnt
            FROM
            (
                 SELECT
                     A.BANK_SUBJECT_QUES_LINK_KEY, A.EXAM_QUES_BANK_KEY,
                     SUBSTR(B.ANSWER, 1, 1) as answer,
                     B.ANSWER_1_REASON, B.ANSWER_2_REASON, B.ANSWER_3_REASON, B.ANSWER_4_REASON,
                     B.EXAM_LEVEL
                 FROM T_BANK_SUBJECT_QUES_LINK A
                 LEFT JOIN T_EXAM_QUESTION_BANK B
                 ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                 WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                 ORDER BY A.POS ASC
             ) T
                 LEFT OUTER JOIN
             (
                 SELECT *
                 FROM T_BANK_SUBJECT_QUES_LINK A
                 LEFT JOIN T_EXAM_QUESTION_BANK B
                 ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
                 LEFT JOIN T_EXAM_QUESTION_USER C
                 ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
                 WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
                 AND C.USER_KEY = #{userKey}
             ) TT
             ON T.BANK_SUBJECT_QUES_LINK_KEY = TT.BANK_SUBJECT_QUES_LINK_KEY
         ) Z
    </select>

    <select id="selectProblemNumberScoreList" resultType="ProblemNumberScoreVO">
        SELECT '1' AS problemNumber, COUNT(*) as scoreCnt
        FROM T_BANK_SUBJECT_QUES_LINK A
        LEFT OUTER JOIN T_EXAM_QUESTION_BANK B
        ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
        LEFT OUTER JOIN T_EXAM_QUESTION_USER C
        ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
        WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
        AND A.EXAM_QUES_BANK_KEY = #{examQuesBankKey}
        AND C.USER_ANSWER = 1

        UNION ALL

        SELECT '2' AS problemNumber, COUNT(*) as scoreCnt
        FROM T_BANK_SUBJECT_QUES_LINK A
        LEFT OUTER JOIN T_EXAM_QUESTION_BANK B
        ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
        LEFT OUTER JOIN T_EXAM_QUESTION_USER C
        ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
        WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
        AND A.EXAM_QUES_BANK_KEY = #{examQuesBankKey}
        AND C.USER_ANSWER = 2

        UNION ALL

        SELECT '3' AS problemNumber, COUNT(*) as scoreCnt
        FROM T_BANK_SUBJECT_QUES_LINK A
        LEFT OUTER JOIN T_EXAM_QUESTION_BANK B
        ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
        LEFT OUTER JOIN T_EXAM_QUESTION_USER C
        ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
        WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
        AND A.EXAM_QUES_BANK_KEY = #{examQuesBankKey}
        AND C.USER_ANSWER = 3

        UNION ALL

        SELECT '4' AS problemNumber, COUNT(*) as scoreCnt
        FROM T_BANK_SUBJECT_QUES_LINK A
        LEFT OUTER JOIN T_EXAM_QUESTION_BANK B
        ON A.EXAM_QUES_BANK_KEY = B.EXAM_QUESTION_BANK_KEY
        LEFT OUTER JOIN T_EXAM_QUESTION_USER C
        ON A.EXAM_QUES_BANK_KEY = C.EXAM_QUESTION_BANK_KEY
        WHERE A.EXAM_QUES_BANK_SUBJECT_KEY = #{examQuesBankSubjectKey}
        AND A.EXAM_QUES_BANK_KEY = #{examQuesBankKey}
        AND C.USER_ANSWER = 4
    </select>

</mapper>
