<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zianedu.api.mapper.BoardMapper">

    <select id="selectTBbsDataList" resultType="TBbsDataVO">
        SELECT * FROM T_BBS_DATA
        WHERE BBS_MASTER_KEY = #{bbsMasterKey}
        AND CTG_KEY = #{teacherKey}
        ORDER BY BBS_KEY DESC
        <if test="listType =='LIMIT'">
            OFFSET 0 ROWS FETCH NEXT #{listLimitNumber} ROWS ONLY
        </if>
        <if test="listType =='PAGE'">
            OFFSET #{startNumber} ROWS FETCH NEXT #{listLimitNumber} ROWS ONLY
        </if>
    </select>

    <select id="selectTBbsDataListBySearch" resultType="ReferenceRoomVO">
        SELECT * FROM (
            SELECT
                A.BBS_KEY, A.BBS_PARENT_KEY, TO_CHAR(A.INDATE,'YYYY-MM-DD') as indate, A.TITLE, A.WRITE_USER_KEY, A.READ_COUNT, LEVEL, CONTENTS,
                (SELECT COUNT(BBS_COMMNET_KEY) FROM T_BBS_COMMENT T WHERE T.BBS_KEY = A.BBS_KEY) commentCount, A.PWD
            FROM T_BBS_DATA A
            WHERE A.IS_NOTICE = 0
            AND A.BBS_MASTER_KEY = #{bbsMasterKey}
            AND A.CTG_KEY = #{teacherKey}
            START WITH A.BBS_PARENT_KEY = 0
            CONNECT BY PRIOR A.BBS_KEY = A.BBS_PARENT_KEY
            ORDER SIBLINGS BY A.BBS_PARENT_KEY DESC, A.BBS_KEY DESC
        ) Z
        WHERE 1=1
        <if test="searchType == 'title'">
            AND Z.TITLE LIKE '%'||#{searchText}||'%'
        </if>
        <if test="searchType == 'contents'">
            AND Z.CONTENTS LIKE '%'||#{searchText}||'%'
        </if>
        <if test="searchType == 'user'">
            AND Z.WRITE_USER_KEY IN ( SELECT USER_KEY FROM T_USER WHERE 1=1 AND NAME LIKE '%'||#{searchText}||'%' )
        </if>
        OFFSET #{startNumber} ROWS FETCH NEXT #{listLimitNumber} ROWS ONLY
    </select>

    <select id="selectTBbsDataListBySearchCount" resultType="Integer">
        SELECT * FROM (
            SELECT COUNT(A.BBS_KEY)
            FROM T_BBS_DATA A
            WHERE A.IS_NOTICE = 0
            AND A.BBS_MASTER_KEY = #{bbsMasterKey}
            AND A.CTG_KEY = #{teacherKey}
        ) Z
        WHERE 1=1
        <if test="searchType == 'title'">
            AND Z.TITLE LIKE '%'||#{searchText}||'%'
        </if>
        <if test="searchType == 'contents'">
            AND Z.CONTENTS LIKE '%'||#{searchText}||'%'
        </if>
        <if test="searchType == 'user'">
            AND Z.WRITE_USER_KEY IN ( SELECT USER_KEY FROM T_USER WHERE 1=1 AND NAME LIKE '%'||#{searchText}||'%' )
        </if>
    </select>

    <select id="selectGoodsReviewList" resultType="GoodsReviewVO">
        SELECT
            A.G_REVIEW_KEY, A.TITLE, A.POINT, B.NAME, TO_CHAR(A.indate, 'YYYY-MM-dd') as indate, A.CONTENTS
        FROM T_GOODS_REVIEW A
        INNER JOIN T_USER B
        ON A.USER_KEY = B.USER_KEY
        WHERE 1=1
        AND A.G_KEY IN ( SELECT G_KEY FROM T_GOODS_TEACHER_LINK WHERE TEACHER_KEY = #{teacherKey} )
        ORDER BY A.G_REVIEW_KEY DESC
        <if test="listType =='LIMIT'">
            OFFSET 0 ROWS FETCH NEXT #{listLimitNumber} ROWS ONLY
        </if>
        <if test="listType =='PAGE'">
            OFFSET #{startNumber} ROWS FETCH NEXT #{listLimitNumber} ROWS ONLY
        </if>
    </select>

    <select id="selectTeacherReviewList" resultType="GoodsReviewVO">
        SELECT
        A.G_REVIEW_KEY, A.TITLE, A.POINT, B.NAME, TO_CHAR(A.indate, 'YYYY.MM.dd') as indate, A.CONTENTS
        FROM T_GOODS_REVIEW A
        INNER JOIN T_USER B
        ON A.USER_KEY = B.USER_KEY
        WHERE 1=1
        <if test="gKey == 0">
            AND A.G_KEY IN ( SELECT G_KEY FROM T_GOODS_TEACHER_LINK WHERE TEACHER_KEY = #{teacherKey} )
        </if>
        <if test="gKey > 0">
            AND A.G_KEY = #{gKey}
        </if>
        ORDER BY A.G_REVIEW_KEY DESC
        OFFSET #{startNumber} ROWS FETCH NEXT #{listLimitNumber} ROWS ONLY
    </select>

    <select id="selectTeacherReviewListCount" resultType="Integer">
        SELECT COUNT(A.G_REVIEW_KEY)
        FROM T_GOODS_REVIEW A
        INNER JOIN T_USER B
        ON A.USER_KEY = B.USER_KEY
        WHERE 1=1
        <if test="gKey == 0">
            AND A.G_KEY IN ( SELECT G_KEY FROM T_GOODS_TEACHER_LINK WHERE TEACHER_KEY = #{teacherKey} )
        </if>
        <if test="gKey > 0">
            AND A.G_KEY = #{gKey}
        </if>
    </select>

    <select id="selectTeacherReferenceRoomDetailInfo" resultType="ReferenceRoomDetailVO">
        SELECT
            A.BBS_KEY, TO_CHAR(A.INDATE,'YYYY.MM.DD') as indate, A.TITLE, A.READ_COUNT,
            B.NAME as userName, B.USER_ID, A.CONTENTS, C.FILENAME as fileName
        FROM T_BBS_DATA A
        INNER JOIN T_USER B
        ON A.WRITE_USER_KEY = B.USER_KEY
        LEFT OUTER JOIN T_BBS_DATA_FILE C
        ON A.BBS_KEY = C.BBS_KEY
        WHERE A.BBS_KEY = #{bbsKey}
    </select>

    <select id="selectTeacherReferenceRoomPrevNext" resultType="PrevNextVO">
        SELECT T.* FROM (
            SELECT
                A.BBS_KEY,
                LEAD (A.TITLE,1,'이전글') OVER (ORDER BY A.BBS_KEY) prevTitle,
                LEAD (A.BBS_KEY,1) OVER (ORDER BY A.BBS_KEY) prevBbsKey,
                LEAD (A.WRITE_USER_KEY,1) OVER (ORDER BY A.BBS_KEY) prevWriteUserKey,
                LEAD (A.PWD,1) OVER (ORDER BY A.BBS_KEY) prevPwd,

                LAG  (A.TITLE,1,'다음글') OVER (ORDER BY A.BBS_KEY) nextTitle,
                LAG  (A.BBS_KEY,1) OVER (ORDER BY A.BBS_KEY) nextBbsKey,
                LAG  (A.WRITE_USER_KEY,1) OVER (ORDER BY A.BBS_KEY) nextWriteUserKey,
                LAG  (A.PWD,1)  OVER (ORDER BY A.BBS_KEY) nextPwd
            FROM T_BBS_DATA A
            INNER JOIN T_USER B
            ON A.WRITE_USER_KEY = B.USER_KEY
            WHERE A.BBS_MASTER_KEY = #{bbsMasterKey}
            AND A.CTG_KEY = #{teacherKey}
        ) T
        WHERE T.BBS_KEY = #{bbsKey}
    </select>

    <insert id="insertTGoodsReview" parameterType="TGoodsReviewVO">
        <selectKey resultType="Integer" keyProperty="gReviewKey" order="BEFORE">
            SELECT T_GOODS_REVIEW_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO T_GOODS_REVIEW
        (
            G_REVIEW_KEY, G_KEY, INDATE, USER_KEY, TITLE, CONTENTS, POINT
        )
        VALUES
        (
            #{gReviewKey}, #{gKey}, sysdate, #{userKey}, #{title}, #{contents}, #{point}
        )
    </insert>

</mapper>
